<div class="modal rounded-0" tabindex="-1">
    <div class="modal-dialog" style="min-width: 1600px">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fa fa-edit"></i>&ensp;
                    Label Separation
                </h5>
                <button type="button" class="btn-close" style="color: #fff" @onclick="async() => await OnCloseForm.InvokeAsync()"></button>
            </div>
            <div class="modal-body rounded-0 data-scrollbar" style="max-height: calc(100vh - 250px);background-color:#ecf0f5">
                <div class="row g-3">
                    <div class="col-12 col-md-12">
                        <table class="datatable w-100 mb-0">
                            <thead>
                                <tr>
                                    <th class="text-center" style="width: 10%">ProdOrderNo </th>
                                    <th class="text-center" style="width: 4%">Seq</th>
                                    <th class="text-center" style="width: 4%">Sub</th>
                                    <th class="text-center" style="width: 4%">BxCt</th>
                                    <th class="text-center" style="width: 4%">BxDv</th>
                                    <th class="text-center" style="width: 10%">Qty</th>
                                    <th class="text-center" style="width: 10%">PackingNo</th>
                                    <th class="text-center" style="width: 15%">ItemName</th>
                                    <th class="text-center" style="width: 24%">ColorName</th>
                                    <th class="text-center" style="width: 15%">SizeName</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-center">@obj.ProdOrderNo</td>
                                    <td class="text-center">@obj.Seq</td>
                                    <td class="text-center">@obj.SubSeq</td>
                                    <td class="text-center">@obj.BoxCount</td>
                                    <td class="text-center">@obj.BoxDV</td>
                                    <td class="text-center" style="background-color: #f5f5f5;">@obj.QtyOrder</td>
                                    <td class="text-center">@obj.PackingNo</td>
                                    <td>@obj.ItemName</td>
                                    <td>@obj.ColorName</td>
                                    <td>@obj.SizeName</td>
                                </tr>
                                <tr>
                                    <td colspan="10" class="text-center text-primary">
                                        <i style="font-size: 30px" class="fa fa-angle-double-down"></i>
                                    </td>
                                </tr>
                                @foreach (var item in objDivide)
                                {
                                    <tr>
                                        <td class="text-center">@item.ProdOrderNo</td>
                                        <td class="text-center">@item.Seq</td>
                                        <td class="text-center">@item.SubSeq</td>
                                        <td class="text-center">@item.BoxCount</td>
                                        <td class="text-center fw-bold text-success">@item.BoxDV</td>
                                        <td class="text-center" style="background-color: #f5f5f5;">
                                            <input type="text" class="form-control form-control-sm text-center" value="@item.QtyOrder" 
                                                @onchange="@(async(ChangeEventArgs arg) => await HandleQtyChange(item,arg?.Value?.ToString() ?? ""))"/>
                                        </td>
                                        <td class="text-center">@obj.PackingNo</td>
                                        <td>@obj.ItemName</td>
                                        <td>@obj.ColorName</td>
                                        <td>@obj.SizeName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer rounded-0">
                <button type="button" class="btn btn-dark btn-sm" @onclick="async() => await OnCloseForm.InvokeAsync()">
                    <i class="fa fa-ban fa-fw"></i>
                    Cancel
                </button>
                @if (objDivide.Sum(x => x.QtyOrder) != obj.QtyOrder)
                {
                    <button type="submit" class="btn btn-sm btn-primary" disabled>
                        <i class="fa fa-save fa-fw"></i>
                        Confirm
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-sm btn-primary" @onclick="async () => await OnSubmitForm.InvokeAsync()">
                        <i class="fa fa-save fa-fw"></i>
                        Confirm
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TbProdOrder obj { get; set; } = new TbProdOrder();

    [Parameter]
    public List<ProdOrderDivide> objDivide { get; set; } = new List<ProdOrderDivide>();

    [Parameter]
    public EventCallback<List<ProdOrderDivide>> OnSetObjDivide { get; set; }

    [Parameter]
    public EventCallback OnCloseForm { get; set; }

    [Parameter]
    public EventCallback OnSubmitForm { get; set; }

    protected async Task HandleQtyChange(ProdOrderDivide source, string arg)
    {
        if (int.TryParse(arg, out int output))
        {
            var _qty = int.Parse(arg);
            if (_qty > 0)
            {
                if (_qty >= obj.QtyOrder)
                    await _js.Aleft("The separation Q'ty must be less than the original Q'ty");
                else
                {
                    source.QtyOrder = _qty;
                    objDivide.Where(x => x.BoxDV != source.BoxDV).FirstOrDefault()!.QtyOrder = obj.QtyOrder - source.QtyOrder;
                    await OnSetObjDivide.InvokeAsync(objDivide);
                }
            }
            else
            {
                await _js.Aleft("Q'ty has not been entered.");
            } 
        }
        else
        {
            await _js.Aleft("Incorrect data entered.");
        }
    }
}
