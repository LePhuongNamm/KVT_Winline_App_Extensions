<div class="search-bar">
    <form @onsubmit="async () => await OnChangeSearch.InvokeAsync(parameter)" @formname="filter-form">
        <div class="simple">
            <div class="search-icon"><div class="icon-wrapper"><i class="fas fa-search"></i></div></div>
            <div class="search-fields">
                <div class="row">
                    <div class="col-12 col-lg-3">
                        <div class="row">
                            <div class="col-12 col-lg-4">
                                <div class="form-group">
                                    <label for="ProdOrderNo">
                                        ProdNo
                                    </label>
                                    <InputText @bind-Value="parameter.ProdOrderNo"
                                               id="ProdOrderNo" type="text" class="form-control form-control-sm" style="height: 30px;" />
                                </div>
                            </div>
                            <div class="col-12 col-lg-4">
                                <div class="form-group">
                                    <label for="PackingNo">
                                        OCKV No
                                    </label>
                                    <InputText @bind-Value="parameter.PackingNo"
                                               id="PackingNo" type="text" class="form-control form-control-sm" style="height: 30px;" />
                                </div>
                            </div>
                            <div class="col-12 col-lg-4">
                                <div class="form-group">
                                    <label for="InOut">
                                        FGScan
                                    </label>
                                    <InputSelect id="InOut" class="form-select form-select-sm" @bind-Value="parameter.InOut" style="height: 30px;">
                                        <option value="">-- All --</option>
                                        <option value="N">None</option>
                                        <option value="I">In</option>
                                        <option value="O">Out</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="col-12 col-lg-3">
                        <div class="row">
                            <div class="col-12 col-lg-8">
                                <div class="form-group">
                                    <label for="Customer">
                                        Customer
                                    </label>
                                    <DropDownList Id="Customer" dropdowns="@dropdownCustomer"
                                                  initData="@parameter.Customer" OnSetValue="@((arg) => parameter.Customer = (string?)arg ?? "")" />
                                </div>
                            </div>
                            <div class="col-12 col-lg-4">
                                <div class="form-group">
                                    <label for="Type">
                                        Type
                                    </label>
                                    <InputSelect id="Type" class="form-select form-select-sm" @bind-Value="parameter.Type" style="height: 30px;">
                                        <option value="">-- All --</option>
                                        <option value="LS,I3">LS,I3</option>
                                        <option value="LS">LS</option>
                                        <option value="I3">I3</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-3">
                        <div class="row">
                            <div class="col-12 col-lg-6">
                                <div class="form-group">
                                    <label for="FromDate">
                                        FromDate
                                    </label>
                                    <InputText @bind-Value="parameter.FromDate"
                                               id="FromDate" type="date" class="form-control form-control-sm" style="height: 30px;" />
                                </div>
                            </div>
                            <div class="col-12 col-lg-6">
                                <div class="form-group">
                                    <label for="ToDate">
                                        ToDate
                                    </label>
                                    <InputText @bind-Value="parameter.ToDate"
                                               id="ToDate" type="Date" class="form-control form-control-sm" style="height: 30px;" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-1">
                        <label class="clear-search" for="btn"></label>
                        <button type="submit" id="btn" class="btn btn-primary w-100 btn-sm rounded-1">
                            <i class="fas fa-search fa-fw"></i>
                            <span class="hidden-md">
                                Search
                            </span>
                        </button>
                    </div>
                    <div class="col-12 col-lg-1">
                        <label class="clear-search" for="btn"></label>
                        <button type="button" id="btn" class="btn btn-secondary w-100 btn-sm rounded-1" @onclick="async () => await OnResetSearch.InvokeAsync()">
                            <i class="fas fa-ban fa-fw"></i>
                            <span class="hidden-md">
                                Refresh
                            </span>
                        </button>
                    </div>
                    <div class="col-12 col-lg-1">
                        <label class="clear-search" for="btn"></label>
                        <button type="button" id="btn" class="btn btn-default w-100 btn-sm rounded-1" @onclick="async() => await OnSetAdvanced.InvokeAsync()">
                            <i class="fas fa-plus fa-fw"></i>
                            <span class="hidden-md">
                                Advanced
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="advanced-search-options" style="display: @(isAdvanced ? "block" : "none");">
            <div class="row">
                <div class="col-sm-3 col-md-3">
                    <div class="form-group">
                        <label for="Item">
                            Item
                        </label>
                        @{
                            var _dropdownItem = dropdownItemFullCode.DistinctBy(x => $"{x.ItemCode} - {x.ItemName}")
                            .Select(x => new DropDowList { StrValue = $"{x.ItemCode} - {x.ItemName}", Label = $"{x.ItemCode} - {x.ItemName}" }).ToList();
                        }
                        <DropDownList Id="Item" dropdowns="@_dropdownItem"
                                      initData="@parameter.Item" OnSetValue="@((arg) => parameter.Item = (string?)arg ?? "")" />
                    </div>
                </div>
                <div class="col-sm-3 col-md-3">
                    <div class="form-group">
                        <label for="Color">
                            Color
                        </label>
                        @{
                            var _dropdownColor = !string.IsNullOrEmpty(parameter.Item) ?
                            dropdownItemFullCode.Where(x => $"{x.ItemCode} - {x.ItemName}" == parameter.Item).DistinctBy(x => $"{x.ColorCode} - {x.ColorName}")
                            .Select(x => new DropDowList { StrValue = $"{x.ColorCode} - {x.ColorName}", Label = $"{x.ColorCode} - {x.ColorName}" }).ToList() :
                            dropdownItemFullCode.DistinctBy(x => $"{x.ColorCode} - {x.ColorName}").Select(x => new DropDowList { StrValue = $"{x.ColorCode} - {x.ColorName}", Label = $"{x.ColorCode} - {x.ColorName}" }).ToList();
                        }
                        <DropDownList Id="Color" dropdowns="@_dropdownColor"
                                      initData="@parameter.Color" OnSetValue="@((arg) => parameter.Color = (string?)arg ?? "")" />
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label for="Size">
                            Size
                        </label>
                        @{
                            var _dropdownSize = !string.IsNullOrEmpty(parameter.Item) ?
                            dropdownItemFullCode.Where(x => $"{x.ItemCode} - {x.ItemName}" == parameter.Item).DistinctBy(x => $"{x.SizeCode} - {x.SizeName}")
                            .Select(x => new DropDowList { StrValue = $"{x.SizeCode} - {x.SizeName}", Label = $"{x.SizeCode} - {x.SizeName}" }).ToList() :
                            dropdownItemFullCode.DistinctBy(x => $"{x.SizeCode} - {x.SizeName}")
                            .Select(x => new DropDowList { StrValue = $"{x.SizeCode} - {x.SizeName}", Label = $"{x.SizeCode} - {x.SizeName}" }).ToList();
                        }
                        <DropDownList Id="Size" dropdowns="@_dropdownSize"
                                      initData="@parameter.Size" OnSetValue="@((arg) => parameter.Size = (string?)arg ?? "")" />
                    </div>
                </div>
                <div class="col-sm-2 col-md-2">
                    <div class="form-group">
                        <label for="FullCode">
                            FullCode
                        </label>
                        <InputText @bind-Value="parameter.FullCode"
                                   id="FullCode" type="text" class="form-control form-control-sm" style="height: 30px;" />
                    </div>
                </div>
                <div class="col-sm-1 col-md-1">
                    <div class="form-group">
                        <label for="Reason">
                            Reason
                        </label>
                        <DropDownList Id="Reason" dropdowns="@dropdownReason"
                                      initData="@parameter.Reason" OnSetValue="@((arg) => parameter.Reason = (string?)arg ?? "")" />
                    </div>
                </div>
                <div class="col-sm-1 col-md-1">
                    <div class="form-group">
                        <label for="TakenBy">
                            TakenBy
                        </label>
                        <InputText @bind-Value="parameter.TakenBy"
                                   id="TakenBy" type="text" class="form-control form-control-sm" style="height: 30px;" />
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@code {
    [Parameter] public bool isAdvanced { get; set; } = false;
    [Parameter] public EventCallback OnSetAdvanced { get; set; }

    [Parameter] public OverStationTrackingParameter parameter { get; set; } = new OverStationTrackingParameter();

    [Parameter] public List<ItemFullCodeDropdown> dropdownItemFullCode { get; set; } = new List<ItemFullCodeDropdown>();
    [Parameter] public List<DropDowList> dropdownCustomer { get; set; } = new List<DropDowList>();
    [Parameter] public List<DropDowList> dropdownReason { get; set; } = new List<DropDowList>();

    [Parameter] public EventCallback<OverStationTrackingParameter> OnChangeSearch { get; set; }
    [Parameter] public EventCallback OnResetSearch { get; set; }
}
