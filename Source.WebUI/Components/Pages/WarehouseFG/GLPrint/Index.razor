@page "/WHS/PackingGLLabel"
@attribute [Authorize]
@using Source.WebUI.Components.Pages.WarehouseFG.GLPrint.Components

<PageTitle>Packing GL Label</PageTitle>

<section class="content-header">
    <Breadcrumb pageName="Packing GL Label"
                breadcrumbs="@(new List<BreadcrumbDTO> { new BreadcrumbDTO { Text = "2. Warehouse FG", IsActive = false},
                                                         new BreadcrumbDTO { Text = "2.1 Packing GL Label", IsActive = true}})" />
</section>
<section class="content">
    <div class="row">
        <div class="col-lg-12 mb-1">
            <Filter parameter="@_parameter"
                    OnChangeSearch="async(arg) => await HandleChangeSearch((string)arg)"
                    OnResetSearch="async() => await HandleResetSearch()" />
        </div>
        <div class="col-lg-12">
            <div class="row">
                <div class="col-lg-12 mb-1">
                    <div class="row">
                        <div class="col-12 col-lg-6">
                            <div class="d-flex">
                                <div style="width: 6.2%" class="text-center">
                                    <i class="icon-actions fa fa-level-down-alt" aria-hidden="true"></i>
                                </div>
                                <div class="d-flex" style="width: 350px;">
                                    <input type="text" style="height:28px;background-color: #f9f9f9;border: 1px solid #e2e2e2;"
                                           value="Selected @_objSelecteds.Count rows" class="form-control form-control-sm rounded-0 w-50" readonly>
                                    <button class="btn btn-sm btn-action rounded-0 w-75" @onclick="async() => await HandlePrint()" style="height: 28px">
                                        <i class="fas fa-print fa-fw text-warning"></i>
                                        Print
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-6 text-end"></div>
                    </div>
                </div>

                @if (_objs != null && _objs.Count > 0)
                {
                    <Table objs="_objs" objSelected="_objSelecteds"
                           OnSetSelected="(arg) => _objSelecteds = (List<PakingGlLabel>)arg" />
                }
                else
                {
                    <div class="alert alert-primary mt-1" role="alert">
                        No record found
                    </div>
                }
            </div>
        </div>
    </div>
</section>
@if(_objSelecteds.Count > 0)
{
    <div style="display: none">
        <div id="printable-form">
            @foreach (var obj in _objSelecteds)
            {
                if (obj != _objSelecteds.FirstOrDefault())
                {
                    <p style='overflow:hidden;page-break-after:always;'></p>
                }
                <div style="padding-top: 10px  ;padding-left: 10px ;padding-right: 10px ;padding-bottom: 10px ;width: 3.8in;height: 3.8in">
                   <Printing obj="obj"/>
                </div>
            }
        </div>
    </div>
}


@code {
    protected string _parameter = "";
    protected List<PakingGlLabel> _objs = new List<PakingGlLabel>();
    protected List<PakingGlLabel> _objSelecteds { get; set; } = new List<PakingGlLabel>();

    protected async Task HandleChangeSearch(string parameter)
    {
        await _js.Loading(true);
        _parameter = parameter;
        await FetchData();
        await _js.Loading(false);
    }

    protected async Task HandleResetSearch()
    {
        await _js.Loading(true);
        _parameter = "";
        _objs = new List<PakingGlLabel>();
        _objSelecteds.Clear();
        await _js.Loading(false);
    }

    protected async Task FetchData()
    {
        try
        {
            _objSelecteds.Clear();
            _objs = await _wrapper.WareHouseFG.FindPackingGlLabel(_parameter);
        }
        catch (Exception ex)
        {
            await _js.Aleft(ex.Message);
        }
    }

    public async Task HandlePrint()
    {
        if (_objSelecteds.Count > 0)
        {
            await _js.Loading(true);
            await Task.Delay(50);
            await _js.InvokeVoidAsync("printDiv", $"printable-form");
            _objSelecteds.Clear();
            await _js.Loading(false);
        }
    }
}


