<div class="col-lg-12 mb-1">
    <div id="simple-bar" class="data-scrollbar table-responsive" style="max-height: calc(100vh - 275px);">
        <BlazorTable Class="datatable w-100 mb-0" Items="objs.Skip((_page - 1) * 30).Take(30)" Context="item">
            <TableHeadTemplate>
                <tr style="z-index: 50;background: white;position: sticky;top: 0;box-shadow: 0 1px 1px -1px #615A5A;">
                    <th style="width: 3%" class="text-center">
                        <input type="checkbox" class="form-check-input" checked=@((objSelected.Count > 0 && objSelected.Count == objs.Count) ? true : false)
                               @onchange="(EventArgs) =>  HandleCheckBoxAllClick(EventArgs.Value ?? false)" />
                    </th>
                    <th>Customer</th>
                    <th>Cn</th>
                    <th>Po</th>
                    <th>RefNo</th>
                    <th>Item</th>
                    <th>Color</th>
                    <th>Size</th>
                    <th>Qty</th>
                </tr>
            </TableHeadTemplate>
            <TableRowTemplate>
                <tr>
                    <td class="text-center">
                        <input type="checkbox" class="form-check-input" checked=@(objSelected.Contains(item) ? true : false)
                               @onchange="(EventArgs) => HandleCheckBoxItemClick(item,EventArgs.Value ?? false)" />
                    </td>
                    <td>@item.CustomerCo</td>
                    <td>@($"{item.SEQ}/{item.CtBox} BOXES")</td>
                    <td>@(!string.IsNullOrEmpty(item.OrderNumber) ? item.OrderNumber : "-")</td>
                    <td>@item.RefNo</td>
                    <td>@item.ItemName</td>
                    <td>@item.ColorName</td>
                    <td>@item.SizeName</td>
                    <td>@item.Qty</td>
                </tr>
            </TableRowTemplate>
            <TableFootTemplate>
                <tr>
                    <td colspan="7" class="fw-bold">Total :</td>
                    <td class="fw-bold">Box : @objs.Count()</td>
                    <td class="fw-bold">Qty : @string.Format("{0:#,##0.##}", objs.Sum(x => x.Qty))</td>
                </tr>
            </TableFootTemplate>
        </BlazorTable>
    </div>
</div>
<div class="col-lg-12">
    <div class="row">
        <div class="col-12 col-md-6" style="padding-top: 1rem">
            <span>Total <b class="text-primary">@objs.Count</b> records</span>

        </div>
        <div class="col-12 col-md-6">
            <BlazorTablePagination PageChangeEvent="(page) => _page = page"
                                   Class="pagination pagination-sm float-end"
                                   DisplayTotals="false"
                                   PagingSize="5"
                                   ActivePage="_page"
                                   PageSize="30"
                                   NoOfItems="objs.Count()" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<PakingGlLabel> objs { get; set; } = new List<PakingGlLabel>();

    [Parameter]
    public List<PakingGlLabel> objSelected { get; set; } = new List<PakingGlLabel>();

    [Parameter]
    public EventCallback<List<PakingGlLabel>> OnSetSelected { get; set; }

    protected int _page = 1;

    protected async Task HandleCheckBoxAllClick(object checkValue)
    {
        await Task.Delay(1);
        if ((bool)checkValue)
        {
            foreach (var obj in objs)
            {
                if (!objSelected.Contains(obj))
                    objSelected.Add(obj);
            }
        }
        else
        {
            objSelected.Clear();
        }
        await OnSetSelected.InvokeAsync(objSelected);
    }

    protected async Task HandleCheckBoxItemClick(PakingGlLabel source, object checkValue)
    {
        await Task.Delay(1);
        if ((bool)checkValue)
        {
            if (!objSelected.Contains(source))
                objSelected.Add(source);
        }
        else
        {
            if (objSelected.Contains(source))
                objSelected.Remove(source);
        }
        await OnSetSelected.InvokeAsync(objSelected);
    }
}