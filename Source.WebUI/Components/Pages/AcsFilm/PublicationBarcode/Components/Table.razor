<div class="col-lg-12 mb-1">
    <div id="simple-bar" class="data-scrollbar table-responsive" style="max-height: calc(100vh - 275px);">
        <BlazorTable Class="datatable w-100 mb-0" Items="objs.Skip((_page - 1) * 100).Take(100)" Context="item">
            <TableHeadTemplate>
                <tr style="z-index: 50;background: white;position: sticky;top: 0;box-shadow: 0 1px 1px -1px #615A5A;">
                    <th class="text-center" style="width:3%">
                        <input type="checkbox" class="form-check-input" checked=@((objSelected.Count > 0 && objSelected.Count == objs.Count) ? true : false)
                               @onchange="(EventArgs) =>  HandleCheckBoxAllClick(EventArgs.Value ?? false)" />
                    </th>
                    <th style="width: 7%" class="text-center">ProdOrderNo</th>
                    <th style="width: 7%" class="text-center">PackingNo</th>
                    <th style="width: 10%" class="text-center">Barcode</th>
                    <th style="width: 15%" class="text-center">ItemFullCode</th>
                    <th style="width: 15%" class="text-center">ItemName</th>
                    <th style="width: 15%" class="text-center">ColorName</th>
                    <th style="width: 10%" class="text-center">SizeName</th>
                    <th style="width: 6%" class="text-center">ScanStatus</th>
                    <th style="width: 6%" class="text-center">QtyOrder</th>
                    <th style="width: 6%" class="text-center">Separation</th>
                </tr>
            </TableHeadTemplate>
            <TableRowTemplate>
                <tr>
                    <td class="text-center">
                        <input type="checkbox" class="form-check-input" checked=@(objSelected.Contains(item) ? true : false)
                               @onchange="(EventArgs) => HandleCheckBoxItemClick(item,EventArgs.Value ?? false)" />
                    </td>
                    <td>
                        @item.ProdOrderNo
                    </td>
                    <td>@item.PackingNo</td>
                    <td>
                        @item.Barcode
                    </td>
                    <td>@item.ItemFullCode</td>
                    <td>@item.ItemName</td>
                    <td>@item.ColorName</td>
                    <td>@item.SizeName</td>
                    <td class="text-center">@item.ScanStatus</td>
                    <td class="text-center">@item.OrderQty</td>
                    <td class="text-center">
                        <a href="javascript:void(0)" title="Label Divide" @onclick="async () => await OnOpenForm.InvokeAsync(item)">
                            <img src="img/edit.gif" width="16" height="16" border="0" alt="Label Divide" style="vertical-align: inherit;" />
                        </a>
                    </td>
                </tr>
            </TableRowTemplate>
        </BlazorTable>
    </div>
</div>
<div class="col-lg-12">
    <div class="row">
        <div class="col-12 col-md-6" style="padding-top: 1rem">
            <span>Total <b class="text-primary">@objs.Count</b> records</span>
        </div>
        <div class="col-12 col-md-6">
            <BlazorTablePagination PageChangeEvent="(page) => _page = page"
                                   Class="pagination pagination-sm float-end"
                                   DisplayTotals="false"
                                   PagingSize="5"
                                   ActivePage="_page"
                                   PageSize="100"
                                   NoOfItems="objs.Count()" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<FilmProdOrder> objs { get; set; } = new List<FilmProdOrder>();

    [Parameter]
    public List<FilmProdOrder> objSelected { get; set; } = new List<FilmProdOrder>();

    [Parameter]
    public EventCallback<List<FilmProdOrder>> OnSetSelected { get; set; }

    [Parameter]
    public EventCallback<FilmProdOrder> OnOpenForm { get; set; }

    protected int _page = 1;

    protected async Task HandleCheckBoxAllClick(object checkValue)
    {
        await Task.Delay(1);
        if ((bool)checkValue)
        {
            foreach (var obj in objs)
            {
                if (!objSelected.Contains(obj))
                    objSelected.Add(obj);
            }
        }
        else
        {
            objSelected.Clear();
        }
        await OnSetSelected.InvokeAsync(objSelected);
    }

    protected async Task HandleCheckBoxItemClick(FilmProdOrder source, object checkValue)
    {
        await Task.Delay(1);
        if ((bool)checkValue)
        {
            if (!objSelected.Contains(source))
                objSelected.Add(source);
        }
        else
        {
            if (objSelected.Contains(source))
                objSelected.Remove(source);
        }
        await OnSetSelected.InvokeAsync(objSelected);
    }
}
