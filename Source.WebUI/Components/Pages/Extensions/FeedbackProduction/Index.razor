@page "/Extensions/ProductionFeedback"
@using Source.WebUI.Components.Pages.Extensions.FeedbackProduction.Components

<PageTitle>Feedback Information Production</PageTitle>

<section class="content-header">
    <Breadcrumb pageName="Feedback Information Production"
                breadcrumbs="@(new List<BreadcrumbDTO> { new BreadcrumbDTO { Text = "10. Extensions", IsActive = false},
                                                         new BreadcrumbDTO { Text = "10.3 Production Feedback", IsActive = true}})" />
</section>
<section class="content">
    <div class="row">
        <div class="col-lg-12 mb-1">
            <Filter parameter="@_parameter"
                    OnChangeSearch="async(arg) => await HandleChangeSearch((FeedbackParameter)arg)"
                    OnResetSearch="async() => await HandleResetSearch()" />
        </div>
        <div class="col-lg-12">
            <div class="row">
                @if (_objs != null && _objs.Count > 0)
                {
                    <div class="col-lg-12 mb-1">
                        <div class="row">
                            <div class="col-12 col-lg-6"></div>
                            <div class="col-12 col-lg-6 text-end">
                                <button class="btn btn-sm btn-action" @onclick="async() => await HandleExportExcel()" style="height:28px">
                                    <i class="fa fa-file-excel fa-fw text-success"></i>
                                    Export Excel
                                </button>
                            </div>
                        </div>
                    </div>
                    <Table objs="_objs" page="_page" OnSetPage="(arg) => _page = (int)arg" />
                }
                else
                {
                    <div class="alert alert-primary mt-1" role="alert">
                        No record found
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    protected int _page = 1;
    protected List<FeedbackProduction> _objs = new List<FeedbackProduction>();
    protected FeedbackParameter _parameter = new FeedbackParameter();

    protected override async Task OnInitializedAsync()
    {
        _parameter = new FeedbackParameter()
            {
                FromDate = DateTime.Now.ToString("yyyy-MM-dd"),
                ToDate = DateTime.Now.ToString("yyyy-MM-dd")
            };
        await base.OnInitializedAsync();
    }
    protected async Task HandleChangeSearch(FeedbackParameter parameter)
    {
        await _js.Loading(true);
        _parameter = parameter;
        await FetchData();
        await _js.Loading(false);
    }

    protected async Task HandleResetSearch()
    {
        await _js.Loading(true);
        _page = 1;
        _parameter = new FeedbackParameter()
            {
                FromDate = DateTime.Now.ToString("yyyy-MM-dd"),
                ToDate = DateTime.Now.ToString("yyyy-MM-dd")
            };
        _objs = new List<FeedbackProduction>();
        await _js.Loading(false);
    }

    protected async Task FetchData()
    {
        try
        {
            _page = 1;
            _objs = await _wrapper.Extensions.GetListProductionFeedback(_parameter);
        }
        catch (Exception ex)
        {
            await _js.Aleft(ex.Message);
        }
    }

    protected async Task HandleExportExcel()
    {
        if (_objs != null && _objs.Count > 0)
        {
            await _js.Loading(true);
            try
            {
                DataTable dt = new DataTable();
                dt.Columns.Add("StartDate", typeof(string));
                dt.Columns.Add("Shift", typeof(string));
                dt.Columns.Add("Feedback", typeof(string));
                dt.Columns.Add("Machine", typeof(string));
                dt.Columns.Add("ItemFullCode", typeof(string));
                dt.Columns.Add("Barcode", typeof(string));
                dt.Columns.Add("Qty", typeof(string));
                dt.Columns.Add("UserFeedback", typeof(string));
                dt.Columns.Add("ItemDesc", typeof(string));
                foreach (var item in _objs)
                {
                    DataRow row = dt.NewRow();
                    row[0] = item.StartDate != null ? item.StartDate.Value.ToString("MM/dd/yyyy HH:mm") : "";
                    row[1] = item.ShiftID;
                    row[2] = item.ContentFB;
                    row[3] = item.MachineNo;
                    row[4] = item.ItemFullCode;
                    row[5] = item.Barcode;
                    row[6] = item.QtyOrder;
                    row[7] = item.CreateUser;
                    row[8] = item.ItemDesc;
                    dt.Rows.Add(row);
                }
                var fileStream = new MemoryStream(EPPlusExtensions.Write(dt, "Feedback Information Production"));
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await _js.InvokeVoidAsync("downloadFileFromStream", "FeedbackProductionOverview.xlsx", streamRef);
            }
            catch (Exception ex)
            {
                await _js.Aleft(ex.Message);
            }
            await _js.Loading(false);
        }
    }
}
