<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="css/bootstrap.min.css?v=@Guid.NewGuid().ToString()" rel="stylesheet" />
    <link href="css/font-awesome.min.css" rel="stylesheet" />
    <link href="css/admin.css?v=@Guid.NewGuid().ToString()" rel="stylesheet" />
    <link href="css/toast.css" rel="stylesheet" />
    <link href="css/waitMe.css" rel="stylesheet" />
    <link href="css/cad.css" rel="stylesheet" />
    <link href="css/select2.min.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="img/framas mini (black).png" />
    <HeadOutlet @rendermode="@RenderModeForPage" />
</head>
<body>
    <Routes @rendermode="@RenderModeForPage" />
    <div class="divMessageBox animated fadeIn fast" id="MsgBoxBack" style="display: none">
        <div class="MessageBoxContainer animated fadeIn fast" id="Msg1">
            <div class="MessageBoxMiddle">
                <span class="MsgTitle">Notification!</span><p class="pText" id="pMesssage"></p>
                <div class="MessageBoxButtonSection">
                    <button id="confirmNo" class="btn btn-default btn-sm botTempo"><i class="fa fa-ban fa-fw"></i> Cancel</button>
                    <button id="confirmYes" class="btn btn-primary btn-sm botTempo"><i class="fa fa-check fa-fw"></i> Confirm</button>
                </div>
            </div>
        </div>
    </div>
    <div id="reconnect-modal" style="display: none;"></div>
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script src="js/jquery.min.js" type="text/javascript"></script>
    <script src="js/waitme.min.js" type="text/javascript"></script>
    <script src="js/toastr.min.js" type="text/javascript"></script>
    <script src="js/admin.js" type="text/javascript"></script>
    <script src="js/print.min.js" type="text/javascript"></script>
    <script src="_content/KeudellCoding.Blazor.AdvancedBlazorSelect2/Select2JsInterop.js" type="text/javascript"></script>
    <script src="_content/KeudellCoding.Blazor.AdvancedBlazorSelect2/lib/select2/js/select2.full.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        (() => {
            const maximumRetryCount = 3;
            const retryIntervalMilliseconds = 5000;
            const reconnectModal = document.getElementById('reconnect-modal');
            const startReconnectionProcess = () => {
                reconnectModal.style.display = 'block';
                let isCanceled = false;
                (async () => {
                    for (let i = 0; i < maximumRetryCount; i++) {
                        reconnectModal.innerText = `Attempting to reconnect: ${i + 1} of ${maximumRetryCount}`;
                        await new Promise(resolve => setTimeout(resolve, retryIntervalMilliseconds));
                        if (isCanceled) {
                            return;
                        }
                        try {
                            const result = await Blazor.reconnect();
                            if (!result) {
                                location.reload();
                                return;
                            }
                            return;
                        } catch { }
                    }
                    location.reload();
                })();
                return {
                    cancel: () => {
                        isCanceled = true;
                        reconnectModal.style.display = 'none';
                    },
                };
            };
            let currentReconnectionProcess = null;
            Blazor.start({
                circuit: {
                    reconnectionHandler: {
                        onConnectionDown: () => currentReconnectionProcess ??= startReconnectionProcess(),
                        onConnectionUp: () => {
                            currentReconnectionProcess?.cancel();
                            currentReconnectionProcess = null;
                        }
                    },
                    configureSignalR: function (builder) {
                        builder.withServerTimeout(180000);
                    }
                }
            });
        })();
    </script>
</body>
@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null : new InteractiveServerRenderMode(prerender: false);
}
</html>

